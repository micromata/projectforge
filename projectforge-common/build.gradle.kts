import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

//import org.ajoberstar.grgit.Grgit
//import org.ajoberstar.grgit.Grgit
//import java.time.OffsetDateTime
//import java.time.format.DateTimeFormatter

plugins {
    id("buildlogic.pf-module-conventions")
    //id("org.ajoberstar.grgit") version "5.3.0"
    id("org.jetbrains.kotlin.jvm")
}

tasks.withType<KotlinCompile> {
    compilerOptions {
        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21)
    }
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
        events("PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR")
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = true
    }
}

dependencies {
    // Logging:
    api(libs.org.slf4j.api)
    api(libs.org.slf4j.jul.to.slf4j)
    api(libs.ch.qos.logback.classic)
    api(libs.org.apache.logging.log4j.api)
    api(libs.org.apache.logging.log4j.to.slf4j)

    api(libs.commons.beanutils)
    api(libs.org.jetbrains.kotlin.stdlib)
    api(libs.org.jetbrains.kotlin.reflect)
    api(libs.org.apache.commons.collections4)
    api(libs.org.apache.commons.lang3)
    testImplementation(project(":projectforge-commons-test"))
    testImplementation(libs.org.mockito.core)
}

/*tasks.register("generateGitProperties") {
    group = "build"
    description = "Generates a git.properties file with current Git information"

    // Alle Eingaben und Ausgaben deklarieren
    val propsFile = layout.buildDirectory.file("resources/main/git.properties").get().asFile
    outputs.file(propsFile)

    val rootDirPath = rootDir.absolutePath // Lokale Variable für rootDir
    val projectVersion = version.toString() // Lokale Variable für version

    doLast {
        // Git-Repository öffnen
        val git = Grgit.open(mapOf("dir" to file(rootDirPath)))

        // Git-Informationen abrufen
        val branch = git.branch.current().name
        val commitIdFull = git.head().id
        val commitIdAbbrev = commitIdFull.substring(0, 7)
        val commitTime = git.head().dateTime.toString()
        val isDirty = git.status().isClean.not().toString()
        val buildTime = OffsetDateTime.now().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)

        // Datei schreiben
        propsFile.parentFile.mkdirs()
        propsFile.writeText(
            """
            # Generated by Gradle
            git.branch=$branch
            git.build.time=$buildTime
            git.build.version=$projectVersion
            git.commit.id.abbrev=$commitIdAbbrev
            git.commit.id.full=$commitIdFull
            git.commit.time=$commitTime
            git.dirty=$isDirty
            """.trimIndent()
        )
        println("Git properties written to ${propsFile.absolutePath}")
    }
}

// Sicherstellen, dass die Datei in die Ressourcen integriert wird
tasks.named("processResources") {
    dependsOn("generateGitProperties")
}
*/
description = "projectforge-common"
